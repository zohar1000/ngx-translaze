import { ComponentFactoryResolver, Inject, Injectable } from '@angular/core';
import { TRANSLAZE_CONFIG } from '../tokens/translaze-config.token';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { BaseTranslazeService } from './base-translaze.service';
import { TranslazeLangStatus } from '../enums/translaze-lang-status.enum';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/translaze-config.token";
export class TranslazeService extends BaseTranslazeService {
    constructor(componentFactoryResolver, config) {
        super(componentFactoryResolver, config);
        this.FALLBACK_LANG = 'en';
        this.DEFAULT_USE_BROWSER_DEFAULT_LANG = true;
        this.DEFAULT_LOCAL_STORAGE_KEY = 'translaze';
        this.langCode = '';
        this.langName = '';
        this.text$ = new BehaviorSubject('');
        this.lang$ = new ReplaySubject(1);
        this.isText$ = new BehaviorSubject(false);
        this.appText$ = this.text$;
    }
    changeLang(langCode) {
        this.lang$.next({ status: TranslazeLangStatus.Start, langCode, prevLangCode: this.langCode });
        super.changeLang(langCode);
    }
    onNewLangReady(langCode) {
        super.onNewLangReady(langCode);
        this.langCode = langCode;
        this.langName = this.getConfig().langs.find(item => item.code === this.langCode).name;
        this.updateLocalStorage(langCode);
        if (this.config.onLangTextReady)
            this.config.onLangTextReady(this.langs[langCode]);
        this.lang$.next({ status: TranslazeLangStatus.Complete, langCode });
        this.text$.next(this.langs[langCode]);
        this.isText$.next(true);
    }
    updateLocalStorage(langCode) {
        const lsItem = { langCode };
        const localStorageKey = this.getConfig().localStorageKey || this.DEFAULT_LOCAL_STORAGE_KEY;
        localStorage.setItem(localStorageKey, JSON.stringify(lsItem));
    }
    getConfig() {
        return this.config;
    }
    getInitialLangCode() {
        const lsStr = localStorage.getItem(this.getConfig().localStorageKey);
        let langCode;
        if (lsStr) {
            const lsItem = JSON.parse(lsStr);
            langCode = lsItem.langCode;
        }
        else {
            let langItem;
            let isUseBrowserDefaultLang = this.getConfig().isUseBrowserDefaultLang;
            if (isUseBrowserDefaultLang === undefined)
                isUseBrowserDefaultLang = this.DEFAULT_USE_BROWSER_DEFAULT_LANG;
            if (isUseBrowserDefaultLang && navigator) {
                langCode = navigator.language;
                langItem = this.config.langs.find(item => item.code.toLowerCase() === langCode.toLowerCase());
                if (!langItem) {
                    langCode = langCode.substr(0, 2);
                    langItem = this.config.langs.find(item => item.code.toLowerCase() === langCode.toLowerCase());
                }
                if (!langItem)
                    langCode = '';
            }
            if (!langCode) {
                langItem = this.config.langs.find(item => item.default);
                if (langItem)
                    langCode = langItem.code;
            }
            if (!langCode)
                langCode = this.FALLBACK_LANG;
        }
        return langCode;
    }
    getInfo() {
        return {
            config: this.getConfig(),
            langCode: this.langCode,
            langName: this.langName
        };
    }
}
TranslazeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslazeService_Factory() { return new TranslazeService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i1.TRANSLAZE_CONFIG)); }, token: TranslazeService, providedIn: "root" });
TranslazeService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
TranslazeService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLAZE_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,