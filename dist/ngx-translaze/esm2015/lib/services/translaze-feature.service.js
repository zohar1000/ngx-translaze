import { ComponentFactoryResolver, Inject, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TRANSLAZE_FEATURE_CONFIG } from '../tokens/translaze-feature-config.token';
import { TranslazeService } from './translaze.service';
import { BaseTranslazeService } from './base-translaze.service';
export class TranslazeFeatureService extends BaseTranslazeService {
    constructor(componentFactoryResolver, config, translazeService) {
        super(componentFactoryResolver, config);
        this.translazeService = translazeService;
        this.featureText$ = new BehaviorSubject('');
        this.isFeatureText$ = new BehaviorSubject(false);
        this.appText$ = this.translazeService.text$;
    }
    onNewLangReady(langCode) {
        super.onNewLangReady(langCode);
        this.featureText$.next(this.langs[langCode]);
        this.isFeatureText$.next(true);
    }
    getConfig() {
        return this.config;
    }
    getInitialLangCode() {
        return this.translazeService.getInfo().langCode;
    }
}
TranslazeFeatureService.decorators = [
    { type: Injectable }
];
TranslazeFeatureService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLAZE_FEATURE_CONFIG,] }] },
    { type: TranslazeService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXplLWZlYXR1cmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10cmFuc2xhemUvc3JjL2xpYi9zZXJ2aWNlcy90cmFuc2xhemUtZmVhdHVyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdkMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHaEUsTUFBTSxPQUFPLHVCQUF3QixTQUFRLG9CQUFvQjtJQUkvRCxZQUFZLHdCQUFrRCxFQUNoQixNQUE4QixFQUN4RCxnQkFBa0M7UUFDcEQsS0FBSyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRHRCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFMdEQsaUJBQVksR0FBeUIsSUFBSSxlQUFlLENBQVUsRUFBRSxDQUFDLENBQUM7UUFDdEUsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQU0xQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7SUFDOUMsQ0FBQztJQUVTLGNBQWMsQ0FBQyxRQUFRO1FBQy9CLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBZ0MsQ0FBQztJQUMvQyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUNsRCxDQUFDOzs7WUF4QkYsVUFBVTs7O1lBUEYsd0JBQXdCOzRDQWFsQixNQUFNLFNBQUMsd0JBQXdCO1lBVHJDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyYW5zbGF6ZUZlYXR1cmVDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL3RyYW5zbGF6ZS1mZWF0dXJlLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBUUkFOU0xBWkVfRkVBVFVSRV9DT05GSUcgfSBmcm9tICcuLi90b2tlbnMvdHJhbnNsYXplLWZlYXR1cmUtY29uZmlnLnRva2VuJztcbmltcG9ydCB7IFRyYW5zbGF6ZVNlcnZpY2UgfSBmcm9tICcuL3RyYW5zbGF6ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VUcmFuc2xhemVTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLXRyYW5zbGF6ZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF6ZUZlYXR1cmVTZXJ2aWNlIGV4dGVuZHMgQmFzZVRyYW5zbGF6ZVNlcnZpY2Uge1xuICBmZWF0dXJlVGV4dCQ6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDx1bmtub3duPignJyk7XG4gIGlzRmVhdHVyZVRleHQkID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IoY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgICAgICAgIEBJbmplY3QoVFJBTlNMQVpFX0ZFQVRVUkVfQ09ORklHKSBjb25maWc6IFRyYW5zbGF6ZUZlYXR1cmVDb25maWcsXG4gICAgICAgICAgICAgIHByaXZhdGUgdHJhbnNsYXplU2VydmljZTogVHJhbnNsYXplU2VydmljZSkge1xuICAgIHN1cGVyKGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgY29uZmlnKTtcbiAgICB0aGlzLmFwcFRleHQkID0gdGhpcy50cmFuc2xhemVTZXJ2aWNlLnRleHQkO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uTmV3TGFuZ1JlYWR5KGxhbmdDb2RlKSB7XG4gICAgc3VwZXIub25OZXdMYW5nUmVhZHkobGFuZ0NvZGUpO1xuICAgIHRoaXMuZmVhdHVyZVRleHQkLm5leHQodGhpcy5sYW5nc1tsYW5nQ29kZV0pO1xuICAgIHRoaXMuaXNGZWF0dXJlVGV4dCQubmV4dCh0cnVlKTtcbiAgfVxuXG4gIGdldENvbmZpZygpOiBUcmFuc2xhemVGZWF0dXJlQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcgYXMgVHJhbnNsYXplRmVhdHVyZUNvbmZpZztcbiAgfVxuXG4gIGdldEluaXRpYWxMYW5nQ29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhemVTZXJ2aWNlLmdldEluZm8oKS5sYW5nQ29kZTtcbiAgfVxufVxuIl19